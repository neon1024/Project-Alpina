define.nextId("conduitjs");
(function(d,b){"object"===typeof module&&module.exports?module.exports=b():"function"===typeof define&&define.amd?define([],b(d)):d.Conduit=b(d)})(this,function(d,b){function l(f){if("function"!==typeof f.target)throw Error("You can only make functions into Conduits.");var d=f.pre||[],b=f.post||[],k=[],g=f.context,m=f.target,l={isTarget:!0,fn:f.sync?function(){var a=Array.prototype.slice.call(arguments,0);return m.apply(g,a)}:function(a){var c=Array.prototype.slice.call(arguments,1);c.splice(1,1,
m.apply(g,c));a.apply(this,c)}},n=function(){k=d.concat([l].concat(b))};n();var h=function(){var a=0,c,d;(function p(){var b=Array.prototype.slice.call(arguments,0),e=a;a+=1;e<k.length&&(e=k[e],d="target"===d?"after":e.isTarget?"target":"before",f.sync?"before"===d?(e=e.fn.apply(e.context||g,b),p.apply(this,e||b)):(c=e.fn.apply(e.context||g,b)||c,p.apply(this,[c].concat(b))):e.fn.apply(e.context||g,[p].concat(b)))}).apply(this,arguments);return c};h.steps=function(){return k};h.context=function(a){if(0===
arguments.length)return g;g=a};h.before=function(a,c){a="function"===typeof a?{fn:a}:a;c=c||{};c.prepend?d.unshift(a):d.push(a);n()};h.after=function(a,c){a="function"===typeof a?{fn:a}:a;c=c||{};c.prepend?b.unshift(a):b.push(a);n()};h.clear=function(){d=[];b=[];k=[];n()};h.target=function(a){a&&(m=a);return m};return h}return{Sync:function(b){b.sync=!0;return l.call(this,b)},Async:function(b){return l.call(this,b)}}});