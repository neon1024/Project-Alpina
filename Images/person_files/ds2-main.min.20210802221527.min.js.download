window.digitals2 = window.digitals2 || {};
window.digitals2.main = window.digitals2.main || {};
window.digitals2.main.cqIsInEditMode = false;
if (window.CQ && window.CQ.WCM && window.CQ.WCM.isEditMode() && !window.CQ.WCM.isPreviewMode()) {
    window.digitals2.main.cqIsInEditMode = true;
}

//
define( 'ds2-main',
    [
        'jquery',
        'ds2-animation',
        'lodash',
        'componentInitializer',
        'ds2-resize-events',
        'ds2-cookie-controller'
    ],
    function ($, Animation, _, componentInitializer, ds2ResizeEvents) {

        function ds2Main() {
            this.$window = $(window);
            this.animation = new Animation();
            this.initTrigger();
        }

        var proto = ds2Main.prototype;

        proto.initTrigger = function () {
            this.init();
            this.$window.trigger('initializeComponents');
            this.delayLinkAction();
            this.checkCQMode();
            /** Fix page growth bug in author instance BMWWEB-24868**/
            if (!this.cqIsInEditMode) this.positionFooter();
            this.navigationElementControl();
            this.layerInit();
        };

        proto.init = function () {
            this.scrollToAnkers = true;

            $.fn.hasAttr = function (name) {
                return this.attr(name) !== undefined;
            };

            this.checkCQMode();

            this.policyConformationIsRequired;

            this.externalCommunicationInit();
            this.$window.on("message onmessage", function (event) {
                var messageEvent = event.originalEvent; // get MessageEvent from jQuery event
                var origin = messageEvent.origin; // origin domain from sending window
                var data = messageEvent.data; // expected as JSON string
                var object = null;

                try {
                    object = JSON.parse(data);
                } catch (e) {
                }

                if (null != object && origin.indexOf('.bmw.') >= 0 && ('changeIdModule' === object.type) && object.imgSrc) {
                    $('.ds2-navigation-main--id-module').find('img').attr('src', object.imgSrc);
                }
            });

            // scroll to anchor after content is loaded
            if (this.checkLoaded()) {
                this.jumpToAnchor();
            } else {
                this.$window.on('load', this.jumpToAnchor());
            }

          this.checkFrame();

          // init gcdm
          this.initializeGcdmOnVCOForm();

            setTimeout(function() {
			    var gcdmAccessToken;
			    if (window.consentcontroller && window.consentcontroller.api) {
                    gcdmAccessToken = window.consentcontroller.api.getPersistence('gcdm-accessToken');
                }
                if(window.ds2configurator && gcdmAccessToken) {
                    window.ds2configurator.$.publish('h5vco.account.loggedIn', [true]);
                }
            }, 100);

        };

        proto.checkLoaded = function() {
          return document.readyState === "complete";
        };

        proto.jumpToAnchor = function() {
            var self = this;
            var hash = window.location.hash.replace(/#\//g,'');
            var $scrollToEl;

            if (hash !== '') {
                try {
                    $scrollToEl = $(hash);
                } catch (error) {
                    return false;
                }

                if ($scrollToEl.length) {
                    var originalStyleOverflow = document.documentElement.style.overflow;
                    document.body.style.overflow = "hidden";
                    componentInitializer.initElement($(".ds2-uxn-navigation-content-bar"));
                    $('html, body').animate({
                        scrollTop: $scrollToEl[0].offsetTop + 'px'
                    }, {
                        // set the duration long enough to allow time to lazy load the elements.
                        duration: 3000,

                        // at each animation step, check whether the target has moved.
                        step: function(now, fx) {
                            // where is the target now located on the page? i.e. its location will change as images etc. are lazy loaded
                            var newOffset = $scrollToEl.offset().top;

                            // if where we were originally planning to scroll to is not the same as the new offset (newOffset) then change where the animation is scrolling to (fx.end).
                            if (fx.end !== newOffset) {
                                fx.end = newOffset;
                            }
                        },
                        always: function() {
                            $('.ds2-anchor-wall').hide();
                            document.body.style.overflow = originalStyleOverflow;
                        }
                    });
                } else {
                    $('.ds2-anchor-wall').hide();
                }
            } else {
                $('.ds2-anchor-wall').hide();
            }
        };

        /*
         *
         * check if cq is in editmode, needed for BMWST-2991
         */
        proto.checkCQMode = function () {
            if (window.CQ && window.CQ.WCM && window.CQ.WCM.isEditMode() && !window.CQ.WCM.isPreviewMode()) {
                this.cqIsInEditMode = true;
            }
        };

        proto.delayLinkAction = function () {
            $('a').each(function () {
                var linkHash = this.hash;
                if (linkHash && linkHash.length > 0) {
                    var functionalHash = linkHash.indexOf("/");

                    if (functionalHash > 0) {
                        return;
                    }

                    var pathname = this.pathname;
                    var $this = $(this);
                    $this.on('click', function (e) {
                        e.preventDefault();

                        // fix for anchor-links to current page when lazy images are not loaded (BMWDGTLTP-31309)
                        if (pathname && window.location.pathname === pathname) {
                            var notLoadedImagesNumber = document.querySelectorAll('img[data-src].ds2-slider--img:not([data-was-processed])').length;
                            if (notLoadedImagesNumber > 0) {
                                // additional scroll to load lazy images
                                window.location.hash = linkHash;
                            }
                        }

                        //links with hash need to be delayed
                        setTimeout(function () {
                            if ($this.attr('target') === '_blank') {
                                window.open($this.attr('href'), '_blank');
                            } else {
                                window.location.href = $this.attr('href');
                            }
                        }, 100);
                    });
                }
            });
        };

        proto.layerInit = function () {
            //invoken from ds2-navigation-main.js after build mobile and tabvar navigation
            var self = this;
            var id;

            $('.ds2-login-js--layer-opener').on('click', function () {
                var $this = $(this);
                id = $this.data('layerId');
                self.loginOpendFromExternal = $this.data('layerNoRedirect');
                self.openLayer(id);
            });
        };

        proto.externalCommunicationInit = function () {
            var self = this;
            var $document = $(document);
            if (window.ds2configurator) {
                ds2configurator.$.subscribe('h5vco.account.openLogin', function () {
                    self.loginOpenFromExternal();
                });
                ds2configurator.$.subscribe('h5vco.account.openLoginThroughSaveButton', function () {
                    self.loginOpenThroughSaveButtonFromExternal();
                });
            }
            $document.on('ds2-reactionAfterLogin', function () {
                self.reactionAfterLogin();
            });
            $document.on('ds2-policyConformationRequired', function () {
                self.policyConformationRequired();
            });
            $document.on('ds2-reactionAfterRegistration', function () {
                self.reactionAfterRegistration();
            });
            $document.on('ds2-reactionAfterReregistration', function () {
            	self.reactionAfterReRegistration();
            });
            $document.on('ds2-reRegistrationRequired', function () {
                self.reRegistrationRequired();
            });
            $document.on('ds2-dlo-error', function () {
                self.openLayer('ds2-messages-js--dlo-error');
            });
            $('#ds2-messages-js--dlo-error').find('.close').on('click', function () {
                self.closeLayer('ds2-messages-js--dlo-error');
            });
            $document.on('ds2-gcdmDownError-invokedFromPage', function () {
                $('[data-lightbox-id=gcdmError]').find('.ds2-dialog-button--show-for-layer').addClass('hide');
                $('[data-lightbox-id=gcdmError]').find('.ds2-dialog-button--show-for-page').removeClass('hide');
                self.openLightbox('gcdmError');
            });
            $document.on('ds2-gcdmDownError-invokedFromLayer', function () {
                $('[data-lightbox-id=gcdmError]').find('.ds2-dialog-button--show-for-layer').removeClass('hide');
                $('[data-lightbox-id=gcdmError]').find('.ds2-dialog-button--show-for-page').addClass('hide');
                self.openLightbox('gcdmError');
            });

        };

        //
        // perform redirect if login/register process is invoked from configurator
        //
        proto.redirectAfterLogin = function() {
            // login is from h5vco --> should redirect
            if (proto.loginOpendFromExternal) {

                if (proto.loginOpendFromExternalThroughSaveButton) {
                    ds2configurator.$.publish('h5vco.account.closeRegisterThroughSaveButton');
                }
                else if($("form[d2-campaign-required-login]").length == 0) {
                    targetUrl = $('#loginform').data('redirectGarage');
                    proto.redirectToTargetPage(targetUrl);
                }
            }
        };

        //
        // login successfull
        //
        proto.reactionAfterLogin = function() {
            proto.closeLayer('gcdmLogin');
            proto.closeLayer('gcdmPolicy');

            proto.loginSuccessful = true;

            // registration is pending, redirect is on the thank you page
            if (!proto.registrationSuccessful) {
                proto.redirectAfterLogin();
            }
        };

        //
        // re-registration is required
        //
        proto.reRegistrationRequired = function() {
            proto.closeLayer('gcdmPolicy');
            proto.closeLayer('gcdmLogin');
            proto.openLayer('gcdmReregistration');
        };

        //
        // re-registration finished
        //
        proto.reactionAfterReRegistration = function() {
            proto.closeLayer('gcdmReregistration');
            proto.reactionAfterLogin();
        };

        //
        // registration finished
        //
        proto.reactionAfterRegistration = function () {
            proto.registrationSuccessful = true;
            var $buttonSave = $('.ds2-registration--button-save', '[data-lightbox-id=gcdmRegistration]');
            var $buttonEnd = $('.ds2-registration--button-end', '[data-lightbox-id=gcdmRegistration]');
            if (proto.loginOpendFromExternal) {

                // bind redirect to close on thank you page
                $buttonSave.on('click', proto.redirectAfterLogin);
                $buttonEnd.on('click', proto.redirectAfterLogin);
                // show save button on thank you page
                if (proto.loginOpendFromExternalThroughSaveButton) {
                    $buttonSave.removeClass('hide');
                    $buttonEnd.addClass('hide');
                }
            }

            // don't show save button
            else {
                $buttonSave.addClass('hide');
                $buttonEnd.removeClass('hide');
            }
        };

        //
        // policy confirmation required
        //
        proto.policyConformationRequired = function () {
            this.policyConformationIsRequired = true;

            // @TODO these two lines should not be necessary. If the directive evaluates correctly, the class does not need to be removed here.
            var policyConfirmation = document.querySelector('[data-lightbox-id=gcdmPolicy] [gcdm-policy-confirmation]');
            policyConfirmation.classList.remove('ng-hide');

            this.closeLayer('gcdmLogin');
            this.openLayer('gcdmPolicy');
        };

        //
        // login invoked from configurator
        //
        proto.loginOpenFromExternal = function () {
            proto.loginOpendFromExternal = true;
            proto.addGcdmMarkup()
                .then(function () {
                    proto.openLayer('gcdmLogin')
                })
        };

        //
        // login invoked from configurator save button
        //
        proto.loginOpenThroughSaveButtonFromExternal = function () {
            proto.loginOpendFromExternal = true;
            proto.loginOpendFromExternalThroughSaveButton = true;
            proto.addGcdmMarkup()
                .then(function () {
                    proto.openLayer('gcdmLogin')
                })
        };

        //
        // redirect
        //
        proto.redirectToTargetPage = function (url) {
            if (url) {
                window.location = url;
            }
        };

        proto.closeLayer = function (id) {
            var toClose = document.querySelector('[data-lightbox-id=' + id + ']');

            if (toClose && toClose.Lightbox) {
                toClose.Lightbox.closeLightbox();
            }
        };

        var __addGcdmMarkupPromise;
        /**
         * Loads GCDM markup in lightboxes
         */
        proto.addGcdmMarkup = function () {
            if (__addGcdmMarkupPromise) {
                return __addGcdmMarkupPromise;
            }
            var deferred = $.Deferred();
            var self = this;
            var app = $('#ng-app'),
                appContainers = app.find('[data-lightbox-id=gcdmLogin] .ds2-lightbox__container'),
                isMarkupRequested = appContainers.children().length;
            var modalsToLoad = {};
            var allModals = app.find('[data-modalpath]');

            var getGcdmMarkup = function (element, pagePath) {
                var deff = $.Deferred();
                return {
                    d: deff,
                    resolve: function () {
                        element
                            .find('.ds2-lightbox__container')
                            .load(pagePath + '.html?wcmmode=disabled',
                                function (response, status) {
                                    if (status !== 'error') {
                                        if (element.attr('data-component-initialized')) {
                                            element.attr('data-component-initialized', false);
                                        }
                                        deff.resolve(response);

                                    } else {
                                        deff.reject(status);
                                        console.log(status);
                                    }
                                })
                    }
                }
            };

            var createModalsPromise = function () {
                allModals.each(function () {
                    var modal = $(this),
                        path = modal.data('modalpath'),
                        id = modal.attr('id') || modal.data('lightbox-id');
                    modalsToLoad[id] = new getGcdmMarkup(modal, path);
                })
            };

            var requestAllModals = function () {
                Object.keys(modalsToLoad).map(function (modal) {
                    modalsToLoad[modal].resolve();
                });
            };

            var lightboxReadyEvent,
                onLoaded = function() {
                setTimeout(function () {
                    componentInitializer.initAll(app);
                }, 1000)

                lightboxReadyEvent = document.createEvent('Event');
                lightboxReadyEvent.initEvent('ds2-lightbox-ready', false, false);

                var lightboxes = document.querySelectorAll('.ds2-lightbox');
                for (var i = 0; i < lightboxes.length; i++) {
                    lightboxes[i].dispatchEvent(lightboxReadyEvent);
                }

                deferred.resolve();
            };

            if (!isMarkupRequested && app) {

                this.loadingAnimation().onMarkupRequestStart();
                createModalsPromise();

                $.when(
                    modalsToLoad.gcdmLogin.d,
                    modalsToLoad.gcdmForgottenPassword.d,
                    modalsToLoad.gcdmRegistration.d,
                    modalsToLoad.gcdmReregistration.d,
                    modalsToLoad.gcdmPolicy.d
                )
                    .then(onLoaded)
                    .fail(onLoaded);

                requestAllModals();
            } else {
                deferred.resolve();
            }

            __addGcdmMarkupPromise = deferred.promise();
            return __addGcdmMarkupPromise;
        }

        proto.loadingAnimation = function () {
            var gcdmPlaceholder = $('#ds2-gcdm-placeholder__container'),
                onMarkupRequestStart = function () {
                    gcdmPlaceholder.addClass('ds2-image-loader--preloader-wrapper');
                },
                onMarkupRequestEnd = function () {
                    setTimeout(function () {
                        gcdmPlaceholder.removeClass('ds2-image-loader--preloader-wrapper');
                    }, 10)
                };

            return {
                onMarkupRequestStart: onMarkupRequestStart,
                onMarkupRequestEnd: onMarkupRequestEnd
            }
        }

        /**
         * This waits for initialization of the GCDM
         *
         */
        proto.waitForGcdmInit = function () {
            var $defer = $.Deferred();
            var count = 0;
            var doCheck = function () {
                if (nn.global.ngAppInitalized || count++ > 5) {
                    $defer.resolve();
                }
                else {
                    setTimeout(doCheck, 500);
                }
            }
            doCheck();
            return $defer.promise();
        };

        var __loadGcdmJsPromise;
        /**
         * Loads GCDM js
         */
        proto.loadGcdmJs = function () {
            if (__loadGcdmJsPromise) {
                return __loadGcdmJsPromise;
            }
            var $gcdmLayer = $('#ds2-lightbox-container');
            var urlExternalAngularLib = $gcdmLayer.data('angularapi-url');
            var urlExternalGcdmLib = $gcdmLayer.data('gcdmformapi-url');
            var urlExternalFormsLib = $gcdmLayer.data('formsapi-url');
            var scripts = [];
            var self = this;

            if (urlExternalAngularLib && urlExternalGcdmLib) {
                scripts.push(
                    {
                        url: urlExternalAngularLib,
                        isLoaded: function () {
                            return $.isPlainObject(window.angular);
                        }
                    });
                scripts.push(
                    {
                        url: urlExternalGcdmLib,
                        isLoaded: function () {
                            return $.isPlainObject(window.gcdm);
                        }
                    });
                scripts.push(
                    {
                        url: urlExternalFormsLib,
                        isLoaded: function () {
                            return !!document.querySelectorAll('head > script[src="' + urlExternalFormsLib + '"]').length;
                        }
                    });

                __loadGcdmJsPromise = self.lazyLoadScriptMulti(scripts).then(self.waitForGcdmInit.bind(self));
            }
            else {
                __loadGcdmJsPromise = $.when();
            }
            return __loadGcdmJsPromise;
        };

        /**
         * Opens GCDM layer
         */
        proto.openLayer = function (id) {
            var self = this;
            self.loadGcdmJs()
                .then(function () {
                    self.openLightbox(id);

                    console.log(window.angular);
                    console.log(window.gcdm);
                    self.loadingAnimation().onMarkupRequestEnd();
                })
                .fail(function (err) {
                    console.log(err);
                });
        };

        /**
         * Opens a Lightbox
         * @param id Lightbox ID
         */
        proto.openLightbox = function (id) {
            var toOpen = document.querySelector('[data-lightbox-id=' + id + ']');

            if (toOpen && toOpen.Lightbox) {
                toOpen.Lightbox.openLightbox()
            } else {
                toOpen.addEventListener('ds2-lightbox-initialized', function () {
                    toOpen.Lightbox && toOpen.Lightbox.openLightbox();
                });
            }
        };

        /**
         * Initialize GCDM if VCO form is on page
         */
        proto.initializeGcdmOnVCOForm = function () {
            var self = this;
            var $vcoform = $('#vco');
            if ($vcoform.length) {
                self.addGcdmMarkup()
                    .then(self.loadGcdmJs.bind(self))
                    .then(function () {
                        self.loadingAnimation().onMarkupRequestEnd();
                    });
            }
        };


        /**
         * Lazy Load Multiple Script Files In Parallel, Maintaining Execution Order As If They Loaded In Series (For Better Performance)
         * @memberof mini.digital.util
         * @param {Array} scripts Array of 'script' objects {url: "url to script", isLoaded : function(){//should return true when script is considered as loaded}}
         * @returns {Promise}
         */
        proto.lazyLoadScriptMulti = function (scripts) {
            var deferred = $.Deferred(),
                timeout = 10000,
                script,
                scriptTag,
                scriptsToLoadIndex = 0,
                scriptsToLoadLength = 0,
                pendingScripts = [],
                lastScript = document.scripts[document.scripts.length - 1],
                supportsScriptAsync = 'async' in lastScript,
                loadCount = 0;

            /**
             * Get a list of scripts to be loaded that haven't already been loaded.
             * @private
             * @memberOf mini.digital.util.lazyLoadScriptMulti
             * @param {Array} scripts Array of all the scripts that have been requested to be loaded
             * @returns {Array} Array of all the scripts that have been requested to be loaded that haven't already been loaded
             */
            function getScriptsToLoad(scripts) {
                var scriptsToLoad = [],
                    script,
                    scriptsIndex = 0,
                    scriptsLength = scripts.length;

                for (; scriptsIndex < scriptsLength; scriptsIndex++) {
                    script = scripts[scriptsIndex];

                    if (!$.isFunction(script.isLoaded) || !script.isLoaded()) {
                        scriptsToLoad.push(script);
                    }
                }

                return scriptsToLoad;
            }

            /**
             * Increment the load counter - when all the scripts have loaded, resolve the master promise.
             * @private
             * @memberOf mini.digital.util.lazyLoadScriptMulti
             */
            function incrementLoadCount() {
                loadCount++;
                if (loadCount === scriptsToLoadLength && scriptsToLoadLength !== 0) {
                    deferred.resolve();
                }
            }

            /**
             * Handle script load state in old IE only.
             * @private
             * @memberOf mini.digital.util.lazyLoadScriptMulti
             */
            function readyStateChange() {
                var pendingScript;
                while (pendingScripts[0] && pendingScripts[0].readyState === 'loaded') {
                    pendingScript = pendingScripts.shift();
                    pendingScript.onreadystatechange = null;
                    // using appendChild() fails in some cases in old IE, so use insertBefore() instead
                    lastScript.parentNode.insertBefore(pendingScript, lastScript);
                    incrementLoadCount();
                }
            }

            scriptsToLoad = getScriptsToLoad(scripts);
            scriptsToLoadLength = scriptsToLoad.length;

            if (scriptsToLoad.length) {
                for (; scriptsToLoadIndex < scriptsToLoadLength; scriptsToLoadIndex++) {
                    script = scriptsToLoad[scriptsToLoadIndex];
                    scriptTag = document.createElement('script');
                    if (supportsScriptAsync) {
                        scriptTag.async = false;
                        scriptTag.onload = incrementLoadCount;
                        scriptTag.src = script.url;
                        document.head.appendChild(scriptTag);
                    } else if (lastScript.readyState) {
                        pendingScripts.push(scriptTag);
                        scriptTag.onreadystatechange = readyStateChange;
                        scriptTag.src = script.url;
                    } else {
                        scriptTag.defer = 'defer';
                        scriptTag.onload = incrementLoadCount;
                        scriptTag.src = script.url;
                        document.body.appendChild(scriptTag);
                    }
                }

                window.setTimeout(function () {
                    deferred.reject();
                }, timeout);
            } else {
                deferred.resolve();
            }
            return deferred.promise();
        };

        proto.isIOS = function () {
            return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
        };

        proto.componentsUpdate = function () { //update/reinit components e.g. after ajax calls
            window.digitals2.main.$window.trigger('initializeComponents'); //BMWST-4441
        };

        proto.checkFrame = function () {
            if (window.self !== window.top) {
                if (window.self && window.self.document && window.self.document.body) {
                    $(window.self.document.body).addClass("ds2-iframe--body");
                }
            }
        };

        proto.navigationElementControl = function () {
            var elementContent = $('.ds2-stage-presentation.ds2-contentnavigation'),
                iconWrapper = $('.ds2-subbrand-icon--wrapper'),
                icon = $('.ds2-subbrand-icon--spacing__below-text'),
                elementIcon = iconWrapper.length && iconWrapper.parents('.ds2-subbrand-icon--spacing__below-text').length;

            if (elementContent && elementIcon) {
                icon.css('margin-top', '35px');
            }
        };

        proto.positionFooter = function () {
            var $window = $(window);
            var func = function () {
                var $footer = $('footer');
                var $main = $('main');
                var navHeight = $('.ds2-navigation-main').height();
                var footerHeight = $footer.height() + parseInt($footer.css('padding-top'));
                var contentHeight = $main.height();
                var windowHeight = $window.height();
                var iframe = $('main').find('iframe');
                var idIframe = $(iframe).attr('id');
                if (navHeight + contentHeight < windowHeight && (iframe.length == 0 || (idIframe && idIframe.indexOf("externalContentIFrame") != 0))) {
                    var minHeight = windowHeight - navHeight - footerHeight;
                    $main.css('min-height', minHeight);
                }
            };
            func();
            $window.on('resize', func);
        };

        function supportsPassiveEventListeners() {
            // Test via a getter in the options object to see if the passive property is accessed

            let supportsPassive = false;
            try {
                const opts = Object.defineProperty({}, 'passive', {
                    get: () => {
                        supportsPassive = true;
                        return true;
                    },
                });
                window.addEventListener('testPassive', null, opts);
                window.removeEventListener('testPassive', null, opts);
            } catch (e) {
                supportsPassive = false;
            }

            return supportsPassive;
        }

        window.digitals2.main = undefined;
        window.digitals2.main = new ds2Main();
        window.digitals2.main.supportsPassiveEventListeners = supportsPassiveEventListeners;
        window.digitals2.resizeEvents = new ds2ResizeEvents();

        return ds2Main;
    });

requirejs(['ds2-main'], function (ds2Main) {});
