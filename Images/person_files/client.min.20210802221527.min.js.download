define(
    'ds2-iucp-client',
    ['lodash'],
    function(_) {
        'use strict';

        function IUCPClient(host, marketCode, locale) {
            var baseUrl = host + '/' + marketCode + '/' + locale;

            if (IUCPClient.INSTANCES && IUCPClient.INSTANCES[baseUrl]) {
                return IUCPClient.INSTANCES[baseUrl];
            }

            this.baseUrl = baseUrl;

            IUCPClient.INSTANCES = IUCPClient.INSTANCES || {};
            IUCPClient.INSTANCES[baseUrl] = this;

            return this;
        }

        IUCPClient.prototype.loadVehicleCount = function(modelRangeCode) {
            var self = this;

            var call = _.get(this, 'calls.' + modelRangeCode);

            if (call) {
                return call;
            }

            var iucpUrl = this.baseUrl + '/nsc/service/e-code/' + modelRangeCode;

            call = fetch(iucpUrl)
                .then(
                    function(res) {
                        if (res.status === 200) {
                            return res.json()
                                .then(function(res) {
                                    return res.offersFound;
                                });
                        } else if (res.status === 204) {
                            return Promise.resolve(0);
                        } else {
                            _.set(self, 'calls.' + modelRangeCode, null);
                            const statusText = res.statusText || '';
                            const err = new Error(res.status + ' ' + statusText);
                            err.status = res.status;
                            throw err;
                        }
                    },
                    function(err) {
                        _.set(self, 'calls.' + modelRangeCode, null);
                        throw err;
                    }
                );

            _.set(this, 'calls.' + modelRangeCode, call);

            return call;
        };

        return IUCPClient;
    }
);

define(
    'ds2-component-cpc',
    [
        'ds2-cp-link-list',
        'ds2-iucp-client',
        'jquery',
        'postal.provider',
        'lodash',
        'ds2-stock-locator-api',
        'ds2-mvc-dropdown',
        'ds2-accessibility',
        'business/commons/TrackingAdapter',
    ],
    function (cpLinkListProvider, IUCPClient, $, postal, _, StockLocatorApi, ds2Dropdown, Accessibility, TrackingAdapter) {
        'use strict';

        var ERROR_CODE_VSMS_FAILED = 1001;
        var ERROR_CODE_IUCP_FAILED = 1002;

        function DS2CpcComponent(element) {
            this.element = $(element);
            this.init();

            this.accessibility = new Accessibility(element);
            this.$cpcHeadline = this.element.find('.cpc-component__container__headline');
            this.$cpcDropdown = this.element.find('.ds2-dropdown');
            this.initAccessibility();
        }

        /**
         * Init accessibility features
         */
        DS2CpcComponent.prototype.initAccessibility = function () {
            var self = this;
            var idHeadline = this.accessibility.addUniqueIdAttribute({
                element: this.$cpcHeadline,
                prefix: 'cpc--headline_',
            });
            this.accessibility.addAriaLabelledbyAttribute({
                element: this.$cpcDropdown,
                referencedIds: [idHeadline],
            });
            var id_Dropdown = this.accessibility.addUniqueIdAttribute({
                element: this.$cpcDropdown,
                prefix: 'cpc--dropdown_',
            });
        };

        /**
         * Init get model range data
         */
        DS2CpcComponent.prototype.init = function () {
            var self = this;

            this.relatedComponentData = this.element.data('trackingComponent');

            var data = this.element.data('values') || {};
            self.cpcId = this.element.data('cpcId') || "";
            self.cpcResourcePathHash = this.element.data('cpcResourcePathHash') || "";
            self.marketCode = this.element.data('marketCode') || "";
            self.locale = this.element.data('locale') || "";

            postal.subscribe({
                channel: 'contextual.purchase.context.change',
                topic: 'needanalyser.model.change',
                callback: self.processContextChange.bind(this)
            });

            postal.subscribe({
                channel: "visualizer-component-" + self.cpcId,
                topic: "visualizer.model.change",
                callback: function (data, envelope) {
                    setTimeout(function() { self.processLinks(data); }, 0);
                }
            }).enlistPreserved(); // call enlist preserved to get preserved messages

            if (self.cpcId) {
                // initialize links without context on initialization when integrated in cpc
                self.processLinks({});
            } else {
                self.processLinks(data);
            }

            var $modelDropdown = self.element.find('.ds2-dropdown');

            if (!data.modelRangeCode && $modelDropdown.length > 0) {
                $modelDropdown.show();
                var modelRangeSelect = new ds2Dropdown(document.querySelector('div.ds2-dropdown'));
                modelRangeSelect.on('title-change', function () {
                    setTimeout(function () {
                        self.updateButtonUrl();
                    }.bind(this), 10);
                });
            } else {
                $modelDropdown.hide();
            }
        };

        DS2CpcComponent.prototype.updateButtonUrl = function () {
            var self = this;
            var selectedOption = $(this.element).find('.ds2-dropdown-list__item--active');
            var modelRangeCode = selectedOption.data('model-range-code');
            var hasConfiguratorLink = selectedOption.data('has-configurator-link');
            if (selectedOption && !selectedOption.hasClass('default')) {
                self.processLinks({modelRangeCode, hasConfiguratorLink}, false);
            }
        };

        DS2CpcComponent.prototype.processContextChange = function (data, envelope) {
            var self = this;

            console.log('Context Change');
            console.log('Envelope', envelope);
            console.log('Data', data);

            if (data.cpcId === self.cpcResourcePathHash) {
                self.processLinks(data.context);
            }
        };

        DS2CpcComponent.prototype.processLinks = function (values) {
            var self = this;

            // process links
            var deferreds = $('a', this.element)
                .map(function () {
                    return self.handleLink($(this), values)
                })
                .toArray();

            var onFinish = function () {
                self.element.find('.cpc-component__container').fadeTo('fast', 1);
            };

            $.when.apply($, deferreds).then(onFinish, onFinish);
        };

        DS2CpcComponent.prototype.loadVehicleCountFromStockLocator = function (linkInfo, modelRangeCode) {
            var self = this;

            var c2bUrl = self.element.data('c2bUrl') || "";
            var stockLocatorUrl = linkInfo.path;

            var stockLocatorApi = new StockLocatorApi.default(stockLocatorUrl, c2bUrl);

            return stockLocatorApi.loadAvailableVehicles(modelRangeCode)
                .then(
                    function (count) {
                        return {linkInfo: linkInfo, hasCount: true, count: count};
                    },
                    function (err) {
                        var message = err && err.message ? err.message : 'unknown error occurred';
                        var effect = "error loading vehicles from stock locator > " + message;
                        var errorCode = err && err.status ? err.status : ERROR_CODE_VSMS_FAILED;
                        self.trackErrorEvent(effect, errorCode);
                        return {linkInfo: linkInfo};
                    });
        };

        DS2CpcComponent.prototype.loadVehicleCountFromIucp = function (linkInfo, modelRangeCode) {
            var self = this;

            var iucpBaseUrl = self.element.data('iucpUrl') || "";

            return new IUCPClient(iucpBaseUrl, self.marketCode, self.locale).loadVehicleCount(modelRangeCode)
                .then(function (count) {
                    return {linkInfo: linkInfo, hasCount: true, count: count};
                })
                .catch(function (err) {
                    var message = err && err.message ? err.message : 'unknown error occurred';
                    var effect = "error loading vehicles from iucp > " + message;
                    var errorCode = err && err.status ? err.status : ERROR_CODE_IUCP_FAILED;
                    self.trackErrorEvent(effect, errorCode);
                    return {linkInfo: linkInfo};
                });
        };

        DS2CpcComponent.prototype.replaceIconWithCount = function ($link, data) {
            var $comp = $link.closest('.ds-icon-button__box');
            var max = data.linkInfo.maxNumberOfVehicles;

            if (max && data.count > max) {
                data.count = max + '+';
            }

            $comp.data('count', data.count);

            $('.icons-box', $comp).html(
                '<div class="loading-spinner-grey"></div><span class="ds2-cpc-button__count ds2-font-xl" aria-hidden="true">'
                + data.count
                + '</span>'
            );

            $('.ds2-button--responsive-line', $comp).html(
                '<div class="loading-spinner-grey"></div><span class="ds2-cpc-button__inline-count" aria-hidden="true">'
                + data.count
                + ' </span>'
                + data.linkInfo.buttonText
            );

            var $ds2Button = $('.ds2-button--responsive-line', $comp);
            var ariaLabel = $ds2Button.parent().attr('data-Screenreader-text');
            $ds2Button.closest('.button').attr(
                'aria-label',
                ariaLabel.replace('{label}', data.linkInfo.buttonText).replace('{count}', data.count)
            );
        };

        DS2CpcComponent.prototype.replaceCountWithIcon = function ($link, data) {
            var $comp = $link.closest('.ds-icon-button__box');
            var iconForButton = data.linkInfo.type.replace(/id/g, 'icon');

            $('.icons-box', $comp).html(
                '<div class="loading-spinner-grey"></div><span class="ds2-cpc-button__icon '
                + iconForButton
                + '"></span>'
            );

            $('.ds2-button--responsive-line', $comp).html(
                '<div class="loading-spinner-grey"></div><span class="ds2-cpc-button__inline-count">'
                + '</span>'
                + data.linkInfo.buttonText
            );
        };

        DS2CpcComponent.prototype.disableButton = function ($link) {
            var $comp = $link.closest('.ds-icon-button__box');

            $link.addClass('disabled');
            $link.removeAttr('href');
            $('.ds2-cpc-button__icon', $comp).addClass('disable-icon');
        };

        DS2CpcComponent.prototype.enableButton = function ($link) {
            var $comp = $link.closest('.ds-icon-button__box');

            $link.removeClass('disabled');
            $('.ds2-cpc-button__icon', $comp).removeClass('disable-icon');
        };

        DS2CpcComponent.prototype.showLoadingSpinner = function ($link) {
            var iconButtonBox = $link.closest('.ds-icon-button__box');
            iconButtonBox.find('.loading-spinner-grey').css({'display': 'inline-block'});
            iconButtonBox.find('.ds2-cpc-button__icon').hide();
            iconButtonBox.find('.ds2-cpc-button__count').hide();
            iconButtonBox.find('.ds2-cpc-button__inline-count').hide();
        };

        DS2CpcComponent.prototype.handleLink = function ($link, values) {
            var self = this;
            var linkName = $link.data('linkName');

            var modelRangeCode = values.modelRangeCode || null;
            var hasConfiguratorLink = values.hasConfiguratorLink !== false;
            var backendConfiguration = $link.data('backendConfiguration') || null;

            return cpLinkListProvider.getLinkById(linkName, values)
                .then(function (linkInfo) {
                    if (modelRangeCode) {
                        var cachedVehicleCount = self.getCachedVehicleCount(backendConfiguration, modelRangeCode);
                        if (cachedVehicleCount.isCached) {
                            return Promise.resolve(cachedVehicleCount.data);
                        }
                        switch (backendConfiguration) {
                            case 'masterStockLocator':
                                self.showLoadingSpinner($link);
                                return self.loadVehicleCountFromStockLocator(linkInfo, modelRangeCode);
                            case 'masterUcp':
                                self.showLoadingSpinner($link);
                                return self.loadVehicleCountFromIucp(linkInfo, modelRangeCode);
                        }
                    }
                    return Promise.resolve({linkInfo: linkInfo});
                })
                .then(function (data) {
                    self.cacheVehicleCount(backendConfiguration, modelRangeCode, data);
                    return data;
                })

                // SUCCESS: link is shown
                .then(function (data) {
                        var linkInfo = data.linkInfo;
                        var modelRangePlaceholder = '$%7BmodelRangeCode%7D';
                        if (linkInfo.path.includes(modelRangePlaceholder))
                            linkInfo.path = linkInfo.path.replace(modelRangePlaceholder, modelRangeCode);
                        $link.prop('href', linkInfo.path);

                        var min = linkInfo.minNumberOfVehicles > 0 ? linkInfo.minNumberOfVehicles : 0;

                        if (modelRangeCode && data.hasCount) {
                            if (data.count < min) {
                                self.replaceCountWithIcon($link, data);
                            } else {
                                self.replaceIconWithCount($link, data);
                            }
                        }

                        if ((linkInfo.type === 'id-configurator' && !hasConfiguratorLink) || (data.hasCount && data.count === 0)) {
                            self.disableButton($link);
                        } else {
                            self.enableButton($link);
                            self.updateTracking($link, values, linkInfo.path);
                        }
                    },

                    // FAILURE: link is hidden
                    function () {
                        $link.addClass('disabled');
                    });
        };

        DS2CpcComponent.prototype.updateTracking = function ($link, values, url) {
            var trackingEvent = $link.data('tracking-event');
            if (!_.isPlainObject(trackingEvent)) {
                return;
            }

            var isInternal = url.startsWith('/') || window.location.hostname === new URL(url).hostname;

            _.set(trackingEvent, 'category.mmdr', values.modelRangeCode || "");
            _.set(trackingEvent, 'eventInfo.target', url || "");
            _.set(trackingEvent, 'eventInfo.eventAction', isInternal ? 'internal click' : 'outbound click');
            _.set(trackingEvent, 'category.eventType', isInternal ? 'delayed' : 'triggered');
            $link.attr('data-tracking-event', JSON.stringify(trackingEvent));
        };

        DS2CpcComponent.prototype.getCachedVehicleCount = function (backendConfiguration, modelRangeCode) {
            if (!backendConfiguration || !modelRangeCode) {
                return {
                    isCached: false,
                };
            }

            return _.get(this, backendConfiguration + '.' + modelRangeCode, {isCached: false});
        };

        DS2CpcComponent.prototype.cacheVehicleCount = function (backendConfiguration, modelRangeCode, data) {
            if (!backendConfiguration || !modelRangeCode) {
                return;
            }

            var entry = {
                isCached: true,
                data: data,
            };
            _.set(this, backendConfiguration + '.' + modelRangeCode, entry);
        };

        DS2CpcComponent.prototype.trackErrorEvent = function (effect, errorCode) {
            var eventData = {
                eventInfo: {
                    eventName: 'error',
                    eventAction: 'call',
                    eventPoints: 'na',
                    type: 'backend error',
                    effect: 'nsc > ' + effect,
                    cause: 'load available vehicles',
                    target: 'na',
                    element: 'na',
                },
                category: {
                    primaryCategory: 'cpc',
                    subCategory1: errorCode || 'na',
                },
                attributes: {
                    linkedComponent: {
                        componentInfo: this.relatedComponentData && this.relatedComponentData.componentInfo.componentID,
                    },
                    linkedPage: {
                        pageInfo: {
                            pageID: window.location.pathname
                        },
                    },
                },
            };

            var options = TrackingAdapter.buildOptions('nsc-cpc-error');
            TrackingAdapter.trackEvent(eventData, {}, options);
        };

        return DS2CpcComponent;
    }
);

